#!/bin/bash

gog_version="0.0.12";

dir="$( dirname "${BASH_SOURCE[0]}" )";
lib="/usr/local/lib";
gog_library="/usr/local/lib/gog";

#
# colors
#

PURPLE='\033[0;35m'
RED='\033[31m'
GRAY='\033[90m'
NC='\033[0m'

#
# keys
#

UP=$'A'
DOWN=$'B'
RETURN=$''

#
# search
#

SEARCH=""
LIST=()
SELECTED_SEARCH=""
SELECTED_NAME=""

#
# service
#

SERVICE="https://gog.codes/gog"
WEB="https://gog.codes/scripts"

# SERVICE="http://10.0.1.6:3400/gog"
# WEB="http://10.0.1.6:3400/scripts"

#
# params
#

param=$1;
param_2=$2;
param_3=$3;
param_4=$4;
param_5=$5;
param_6=$6;
param_7=$7;
param_8=$8;
param_9=$9;
param_10=$10;

#
# common
#

fullscreen_enter() {
	tput smcup
  stty -echo
	cursor_hide
}

fullscreen_leave() {
	tput rmcup
  stty echo
	cursor_show
}

cursor_hide() {
  printf "\e[?25l"
}

cursor_show() {
  printf "\e[?25h"
}

erase_line() {
  printf "\033[1A\033[2K"
}

#
# draw: generic running header
#

draw_header() {
	printf "\n  ${PURPLE}gog: running - $@${NC}\n\n"
}

#
# draw: generic install header
#

draw_install() {
	printf "\n  ${PURPLE}gog: installing - $@${NC}\n"
}

#
# draw: generic error handeling
#

draw_error() {
	printf "\n  ${RED}gog: error - $@${NC}\n\n"
}

#
# draw: service 404
#

draw_not_found() {
	printf "\n  ${RED}gog: 404 - $@${NC}\n\n"
}

#
# draw: generic process completion handeling
#

draw_feedback() {
	printf "\n  ${GRAY}gog: $@${NC}\n\n"
}

#
# draw: generig question handeling
#

draw_question() {
	printf "\n  ${PURPLE}gog: $@? [y/n]${NC}\n\n"
}

#
# draw: short help
#

draw_help() {
	printf "\n  Usage: gog <command>\n\n";
	printf "  ${GRAY}where <command> is one of:${NC}\n";
	echo "      -h, --help                  general help/usage of gog";
	echo "      -v, --version               current version of gog";
	echo "      -p, --path                  gog paths information";
	echo "      -l, --list                  list all shell scripts available";
	echo "      -s, --search                starts script search"
	echo "      -c, --copy <script path>    copy script into gog library";
	echo "      -r, --remove <script name>  remove shell script";
	echo "      -n, --new <script name>     opens vim and adds script after exit";
	echo "      -e, --edit <script name>    edits library script in vim";

	printf "\n\n  gog <script name>               will execute given shell script\n\n";
	printf "  ${GRAY}gog@$gog_version - script library: $gog_library${NC}\n\n";
}

#
# draw: full help
#

draw_help_full() {
	printf "\n  ${GRAY}version:${NC} gog@$gog_version\n  ${GRAY}global working directory:${NC} ${BASH_SOURCE[0]}\n"
	printf "\n  Usage of gog:\n"
	printf "\n  gog <script name>           will execute given script from gog's library"
	printf "\n  gog <script name> <param>   will execute given script and pass parameters into it (maximum 9 parameters)\n\n"

	printf "\n  Searching for new scripts:\n"
	printf "\n  gog -s ${GRAY}or${NC} gog --search         starts search by script name"
	printf "\n  gog -s -d ${GRAY}or${NC} gog --search -d   starts search by description"
	printf "\n  gog -s -k ${GRAY}or${NC} gog --search -k   starts search by keywords\n"
	printf "\n  ${GRAY}Begin by typing the key functionality you are looking for.\n  You can navigate through the search results by using the up/down arrows and select the desired script by pressing enter.${NC} \n\n"

	printf "\n  Installing new scripts:\n"
	printf "\n  gog -i <script name> ${GRAY}or${NC} gog --install<script name>                       installs the latest version of script"
	printf "\n  gog -i <script name>@<version> ${GRAY}or${NC} gog --install<script name>@<version>   installs specific version of a script\n\n"

	printf "\n  Information commands:\n"
	printf "\n  gog -h ${GRAY}or${NC} gog --help                    will display detailed help\n"
	printf "\n  gog -v ${GRAY}or${NC} gog --version                 will display installed version of gog CLI"
	printf "\n  gog -v -clean ${GRAY}or${NC} gog --version -clean   will display sanitized version of gog CLI\n"

	printf "\n  gog -p ${GRAY}or${NC} gog --path         will display path to library, current working directories as well as location of gog CLI\n"
	printf "\n  gog -l ${GRAY}or${NC} gog --list         will display all globally installed scripts in gog's library "
	printf "\n  gog -l -d ${GRAY}or${NC} gog --list -d   will display all globally installed scripts with description"
	printf "\n  gog -l -k ${GRAY}or${NC} gog --list -k   will display all globally installed scripts with keywords"
	printf "\n  gog -l -v ${GRAY}or${NC} gog --list -v   will display all globally installed scripts with versions\n"
	printf "\n  gog -d <script name> ${GRAY}or${NC} gog --detail <script name>   will open script in browser with additional information\n\n"

	printf "\n  Utility commands:\n"
	printf "\n  gog -c <script path> ${GRAY}or${NC} gog --copy <script path>              will copy script from provided path into gog's library"
	printf "\n  gog -r <script name> ${GRAY}or${NC} gog --remove <script name>            will remove script from gog's library"
	printf "\n  gog -n <script name> ${GRAY}or${NC} gog --new <script name>               creates a new script in vim and saves it to gog's library\n"

	printf "\n  gog -e <script name> ${GRAY}or${NC} gog --edit <script name>              allows you to edit script in vim"
	printf "\n  gog -e <script name> -ide ${GRAY}or${NC} gog --edit <script name>  -ide   allows you to edit script in your default ide \n"

	printf "\n  ${GRAY}For updates or additional help checkout https://github.com/kublikon/gog${NC}\n\n"
}

#
# draw: script search view
#

draw_search() {
	clear

	printf "\n  Searching: ${GRAY}$1${NC}\n"
	printf "\n  ${GRAY}Start typing and use arrow keys to select your search result${NC}\n"

	draw_list "$2"
}

#
# draw: search list for search view
#

draw_list() {
	SELECTED_SEARCH=$1

	for item in "${LIST[@]}"; do
		if [[ $item == $SELECTED_SEARCH ]]
		then
			printf "\n  ${PURPLE}>${NC} ${item:0:`expr "$item" : '.*:'`}${GRAY} - ${item#*:}${NC} ${PURPLE}<${NC}"
		else
			printf "\n    ${item:0:`expr "$item" : '.*:'`}${GRAY} - ${item#*:}${NC}"
		fi

	done
}

#
# utility: ensure script exists in library
#

ensure_script() {

	local script=$@

	if [[ "${script:0:1}" == "-" ]]
	then
		draw_error "script names can't start with '-' character"
		exit
	fi

	found_script=$(ls | grep $@)

	if [[ -z  $found_script  ]]
	then
		draw_feedback "$@ not installed"
		exit
	fi
}

#
# utility API: get download
#

get_download() {

	# ensure selection is not empty
	if [[ !  -z  $SELECTED_SEARCH  ]]
	then

		script_name="${SELECTED_SEARCH:0:`expr "$SELECTED_SEARCH" : '.*:'`}"
		script_name="${script_name//:}"

		draw_feedback "installing $script_name"
		local content=$(curl -s -X GET "$SERVICE/download/$script_name")

		echo "$content" > "$gog_library/$script_name"

		SEARCH=""
	fi
}

#
# utility API: get search
#

get_search() {

	if [[ $SEARCH != "" ]];
	then

		if [[ $param_2 == "-n" ]]
		then
			filter_scripts $(curl -s -X GET "$SERVICE/name/$SEARCH")
		elif [[ $param_2 == "-d" ]]
		then
			filter_scripts $(curl -s -X GET "$SERVICE/description/$SEARCH")
		elif [[ $param_2 == "-k" ]]
		then
			filter_scripts $(curl -s -X GET "$SERVICE/keyword/$SEARCH")
		else
			filter_scripts $(curl -s -X GET "$SERVICE/name/$SEARCH")
		fi
	else
		filter_scripts ""
	fi
}

#
# utility: filters returned search results
#

filter_scripts() {
	IFS=';' read -r -a LIST <<< "$@"
}

#
# utility: list search scripts
#

list_search_scripts() {
  for script in "${LIST[@]}"; do
    echo $script
  done
}

#
# utility: output script before selected
#

prev_script() {
	list_search_scripts | grep "$SELECTED_SEARCH" -B 1 | head -n 1
}

#
# utility: output script after selected
#

next_script() {
	list_search_scripts | grep "$SELECTED_SEARCH" -A 1 | tail -n 1
}

#
# main: ensure install
#

check_install() {
	if [ -d "$lib" ];
	then
		if [ ! -d "$lib/gog" ]
		then

			if ! mkdir -m 777 "$lib/gog" 2>/dev/null; then

				printf "\n  ${PURPLE}gog installation: gog needs to setup script library${NC}\n\n"

				sudo mkdir -m 777 "$lib/gog"

			else
				printf "\n  ${PURPLE}gog installation: setting up script library${NC}\n\n"
			fi
		fi
	fi
}

#
# main: search for scripts
#

search() {
	fullscreen_enter
	# get_search $param_2 // for testing

	draw_search "$SEARCH" "${LIST[0]}"

	while true; do
    read -n 1 k

		if [[ "$k" =~ [0-9a-z] ]]
		then

			# add letter
			SEARCH+="$k"

			get_search "$SEARCH"
			draw_search "$SEARCH" "$SELECTED_SEARCH"
		elif [[ "$k" == $'\x7f' ]]
		then

			# remove letter
			if [[ "$SEARCH" == "" ]]
			then
				draw_search "$SEARCH" "$SELECTED_SEARCH"
			else
				SEARCH=${SEARCH:0:(${#SEARCH}-1)}

				get_search "$SEARCH"
				draw_search "$SEARCH" "$SELECTED_SEARCH"
			fi

		fi

    case "$k" in
			$RETURN)
				fullscreen_leave
				get_download
				exit
				;;
			$'\x1b')

				read -rsn1 -t 1 tmp

				if [[ "$tmp" == "[" ]];
				then
					read -rsn1 -t 1 tmp
					case "$tmp" in
					"A")
						draw_search "$SEARCH" "$(prev_script)"
						;;
					"B")
						draw_search "$SEARCH" "$(next_script)"
						;;
					"C")
						draw_search "$SEARCH" "$(next_script)"
						;;
					"D")
						draw_search "$SEARCH" "$(prev_script)"
						;;
					esac
				else
					# TODO: esc - currently double entry bug
					fullscreen_leave
					exit
				fi

				;;
    esac
  done
}

#
# main: show script detail on web
#

detail() {
	if which xdg-open > /dev/null
	then
	  xdg-open "$WEB/$param_2";
	elif which gnome-open > /dev/null
	then
	  gnome-open "$WEB/$param_2";
	else
		open "$WEB/$param_2";
	fi
}

#
# main: run global script
#

run_script() {

	cd $gog_library

	ensure_script $param
	draw_header "$param"
	# chmod a+rwx $param - taking this out for now for permission issue

	read -r header < $param;

	if [[ $header =~ "#!" ]]
	then

		if [[ $header =~ "bash" ]]
		then
			bash ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
		elif [[ $header =~ "javascript" ]]
		then
			node ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
		elif [[ $header =~ "python" ]]
		then
			python ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
		elif [[ $header =~ "c" ]]
		then

			# TODO: remove header before execution and make executable
			cc ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
		else
			bash ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
		fi

	else
		bash ./$param $param_2 $param_3 $param_4 $param_5 $param_6 $param_7 $param_8 $param_9;
	fi

}

#
# main: list all global scripts
#

list_scripts() {
	printf "\n  ${GRAY}$gog_library${NC}\n"

	cd $gog_library;

	local files=(*)
	local last=${files[$(( ${#files[*]} - 1 ))]}

	for entry in *
	do
		if [ $entry != "README.md" ] && [ $entry != "*" ]
		then

			if [[ $param_2 == '-d' ]]
			then
				description=$(grep -F 'description:' $entry)
			elif [[ $param_2 == '-k' ]]
			then
				description=$(grep -F 'keywords:' $entry)
			elif [[ $param_2 == '-v' ]]
			then
				description=$(grep -F 'version:' $entry)
			fi

			if [[ $entry == $last ]]
			then
				printf "  └── $entry ${GRAY}${description/#*:/-}${NC}\n\n";
			else
	  		printf "  ├── $entry ${GRAY}${description/#*:/-}${NC}\n";
			fi

	  fi
	done
}

#
# main: copy script from path
#

copy_script() {
	if [[ $param_2 ]]
	then
		cp $param_2 $gog_library;
	else
		draw_help;
	fi

	draw_feedback "$param_2 added to library"
}

#
# main: remove script from gog
#

remove_script() {
	if [[ $param_2 ]]
	then
		draw_question "are you sure you want to remove $param_2"

		read input_answer;

		if [ $input_answer = 'y' ]
		then
			rm $gog_library/$param_2;

			draw_feedback "$param_2 removed from library"
		fi

	else
		draw_help;
	fi
}

#
# main: create new script in vim
#

new_script() {

	if [[ "$param_2" ]]
	then
		vim "$param_2";

		cp $param_2 $gog_library;
		rm $param_2;

		draw_feedback "$param_2 added to library"
	else
		draw_feedback "please include script name"
	fi
}

#
# main: edit existing script
#

edit_script() {

	if [[ "$param_2" ]]
	then

		if [ "$param_3" == '-ide' ]
		then
			open -t "$gog_library/$param_2"
		else
			vim "$gog_library/$param_2"
		fi

		draw_feedback "$param_2 script edited"
	else
		draw_feedback "please include script name"
	fi
}

#
# main: install script from service
#

install_script() {

	draw_install "$param_2"

	local content=$(curl -s -X GET "$SERVICE/install/$param_2")

	if [[ "$content" == "404" ]]
	then
		draw_not_found "script $param_2 not found"
	else
		echo "$content" > "$gog_library/$param_2"

		draw_feedback "$param_2 installed"
	fi
}

#
# main: get current version of gog
#

version() {

	if [[ "$param_2" == "-clean" ]]
	then
		printf "$gog_version\n";
	else
		printf "\n  ${GRAY}version:${NC} gog@$gog_version\n\n";
	fi
}

#
# main: get working paths
#

path() {
	printf "\n  ${GRAY}present working directory:${NC} `pwd`"
	printf "\n  ${GRAY}CLI shell directory:${NC}       $( dirname "${BASH_SOURCE[0]}" )"
	printf "\n  ${GRAY}global script library:${NC}   $gog_library\n\n"
}

#
# main switch
#

# always check the install
check_install

case "$param" in
	"") draw_help ;;
	-l) list_scripts ;;
  --list) list_scripts ;;
  -c) copy_script ;;
  --copy) copy_script ;;
  -r) remove_script ;;
  --remove) remove_script ;;
  -n) new_script ;;
  --new) new_script ;;
  -e) edit_script ;;
  --edit) edit_script ;;
	-i) install_script ;;
	--install) install_script ;;
  -h) draw_help_full ;;
  --help) draw_help_full ;;
  -v) version ;;
  --version) version ;;
  -p) path ;;
  --path) path ;;
	-s) search ;;
	--search) search ;;
	-d) detail ;;
	--detail) detail ;;
  *) run_script ;;
esac
